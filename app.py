import streamlit as st
import pandas as pd
import numpy as np
import pickle
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import os

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î CLIENT_ID ‡πÅ‡∏•‡∏∞ CLIENT_SECRET ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö)
CLIENT_ID = "eb6a3de8147842788ca4572b06728b08"
CLIENT_SECRET = "ffed6e5600e24157ada66d2dae3c1773"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ 'data' ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists('data'):
    os.makedirs('data')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 'df.pkl' ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists('data/df.pkl'):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á)
    music_df = pd.DataFrame({
        'song': ['Shape of You', 'Blinding Lights', 'Dance Monkey', 'Someone You Loved', 'Shallow'],
        'artist': ['Ed Sheeran', 'The Weeknd', 'Tones and I', 'Lewis Capaldi', 'Lady Gaga']
    })
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DataFrame ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå 'df.pkl'
    music_df.to_pickle('data/df.pkl')
else:
    # ‡πÇ‡∏´‡∏•‡∏î DataFrame ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå 'df.pkl'
    music_df = pd.read_pickle('data/df.pkl')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 'similarity.pkl' ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists('data/similarity.pkl'):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á)
    similarity_matrix = np.random.rand(len(music_df), len(music_df))
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå 'similarity.pkl'
    with open('data/similarity.pkl', 'wb') as f:
        pickle.dump(similarity_matrix, f)
else:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå 'similarity.pkl'
    with open('data/similarity.pkl', 'rb') as f:
        similarity_matrix = pickle.load(f)

# Initialize the Spotify client
client_credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

def get_song_album_cover_url(song_name, artist_name):
    search_query = f"track:{song_name} artist:{artist_name}"
    results = sp.search(q=search_query, type="track", limit=1)
    if results['tracks']['items']:
        track = results['tracks']['items'][0]
        album_cover_url = track['album']['images'][0]['url']
        return album_cover_url
    else:
        # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö
        return "https://i.postimg.cc/0QNxYz4V/social.png"

def recommend(song):
    if song not in music_df['song'].values:
        return [], []
    index = music_df[music_df['song'] == song].index[0]
    distances = list(enumerate(similarity_matrix[index]))
    distances = sorted(distances, key=lambda x: x[1], reverse=True)
    
    recommended_music_names = []
    recommended_music_posters = []
    for i in distances[1:6]:
        song_name = music_df.iloc[i[0]]['song']
        artist_name = music_df.iloc[i[0]]['artist']
        recommended_music_names.append(song_name)
        album_cover_url = get_song_album_cover_url(song_name, artist_name)
        recommended_music_posters.append(album_cover_url)
    return recommended_music_names, recommended_music_posters

st.header('üéµ Music Recommender System')

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
song_list = music_df['song'].tolist()
selected_song = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö", song_list)

if st.button('‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'):
    recommendations, posters = recommend(selected_song)
    if recommendations:
        cols = st.columns(len(recommendations))
        for idx, col in enumerate(cols):
            with col:
                st.text(recommendations[idx])
                st.image(posters[idx])
    else:
        st.write("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ")
